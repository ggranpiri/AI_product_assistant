from datetime import datetime
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, CallbackContext, MessageHandler, filters
import config
from gpt_request import get_ingredients_list
import logging

# –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ httpx
logging.getLogger("httpx").setLevel(logging.WARNING)

def get_date() -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å—Ç—Ä–æ–∫–∏."""
    return datetime.now().strftime("%Y-%m-%d %H:%M:%S")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
def log(update: Update) -> None:
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ –¥–µ–π—Å—Ç–≤–∏–π (—Å–æ–æ–±—â–µ–Ω–∏–π –∏–ª–∏ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫)."""
    if update.message:  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        user = update.message.from_user
        name = f"{user.first_name} {user.last_name or ''}".strip()
        text = update.message.text
        print(f'{get_date()} - {name} (id {user.id}) –Ω–∞–ø–∏—Å–∞–ª: "{text}"')

    elif update.callback_query:  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É
        query = update.callback_query
        user = query.from_user
        action = query.data
        print(f'{get_date()} - {user.first_name} (id {user.id}) –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É: "{action}"')

    else:
        print(f"{get_date()} - system_log: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ")


# –§—É–Ω–∫—Ü–∏—è —Å—Ç–∞—Ä—Ç–∞
async def start(update: Update, context: CallbackContext) -> None:
    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏
    keyboard = [
        [InlineKeyboardButton("üçé –°–æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data='basket')],
        [InlineKeyboardButton("üç≥ –°–æ—Å—Ç–∞–≤–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç", callback_data='recipe')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "–Ø ‚Äî –≤–∞—à —É–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç:\n"
        "- üõí –°–æ—Å—Ç–∞–≤–∏—Ç—å —É–¥–æ–±–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫.\n"
        "- ü•ó –°–æ–∑–¥–∞—Ç—å –≤–∫—É—Å–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç –∏–∑ –≤–∞—à–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤.\n\n", reply_markup=reply_markup)


# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
USER_STATE = {}

async def handle_text(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    log(update)
    chat_id = update.effective_chat.id
    text = update.message.text

    if USER_STATE.get(chat_id) == 'shopping':
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤ —Ñ—É–Ω–∫—Ü–∏—é GPT –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        ingredients_list = get_ingredients_list(text)
        await update.message.reply_text(f"–°–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {ingredients_list}")
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        USER_STATE.pop(chat_id, None)
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏–∑ –º–µ–Ω—é.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ —á–µ—Ä–µ–∑ –º–µ–Ω—é BotFather
async def shopping(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /shopping"""
    log(update)
    chat_id = update.effective_chat.id
    USER_STATE[chat_id] = 'shopping'
    await update.message.reply_text("–û–ø–∏—à–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å –∏–ª–∏ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è –∑–∞–∫–∞–∑–∞")



async def recipe(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /recipe"""
    await update.message.reply_text("–í—ã –≤—ã–±—Ä–∞–ª–∏: –°–æ—Å—Ç–∞–≤–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç. –ò–∑ –∫–∞–∫–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –±–ª—é–¥–æ?")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –≤ –º–µ–Ω—é
async def button(update: Update, context: CallbackContext) -> None:
    log(update)
    query = update.callback_query
    await query.answer()

    if query.data == 'basket':
        # –ë–æ—Ç —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–∞–∫–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã –æ–Ω —Ö–æ—á–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É
        await query.edit_message_text(text="–í—ã –≤—ã–±—Ä–∞–ª–∏: –°–æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É. –ö–∞–∫–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã –≤–∞–º –Ω—É–∂–Ω—ã?")

    elif query.data == 'recipe':
        # –ë–æ—Ç —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç, –∫–∞–∫–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã –Ω—É–∂–Ω—ã –¥–ª—è —Ä–µ—Ü–µ–ø—Ç–∞
        await query.edit_message_text(text="–í—ã –≤—ã–±—Ä–∞–ª–∏: –°–æ—Å—Ç–∞–≤–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç. –ò–∑ –∫–∞–∫–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –±–ª—é–¥–æ?")

    else:
        await query.edit_message_text(text="–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤—ã–±–æ—Ä.")


# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
def main() -> None:
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–≤–º–µ—Å—Ç–æ Updater)
    print("–ó–∞–ø—É—Å–∫...")
    application = Application.builder().token(config.TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("shopping", shopping))
    application.add_handler(CommandHandler("recipe", recipe))

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
    application.add_handler(CallbackQueryHandler(button))

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()


if __name__ == '__main__':
    main()
