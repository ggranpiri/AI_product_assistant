from datetime import datetime
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, CallbackContext, MessageHandler, filters
import config
from gpt_request import get_ingredients_list
import logging

logging.getLogger("httpx").setLevel(logging.WARNING)

def get_date() -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å—Ç—Ä–æ–∫–∏."""
    return datetime.now().strftime("%Y-%m-%d %H:%M:%S")

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
def log(update: Update) -> None:
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    if update.message:
        user = update.message.from_user
        name = f"{user.first_name} {user.last_name or ''}".strip()
        text = update.message.text
        print(f'{get_date()} - {name} (id {user.id}) –Ω–∞–ø–∏—Å–∞–ª: "{text}"')

    elif update.callback_query:
        query = update.callback_query
        user = query.from_user
        action = query.data
        print(f'{get_date()} - {user.first_name} (id {user.id}) –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É: "{action}"')

    else:
        print(f"{get_date()} - system_log: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
USER_STATE = {}
FAVORITES = {}
ORDER_HISTORY = {}

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
async def start(update: Update, context: CallbackContext) -> None:
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    log(update)
    keyboard = [
        [InlineKeyboardButton("üçé –°–æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data='shopping')],
        [InlineKeyboardButton("–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data='view_favorites')],
        [InlineKeyboardButton("–ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤", callback_data='order_history')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "–Ø ‚Äî –≤–∞—à —É–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç:\n"
        "- üõí –°–æ—Å—Ç–∞–≤–∏—Ç—å —É–¥–æ–±–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫.\n"
        "- ü•ó –°–æ–∑–¥–∞—Ç—å –≤–∫—É—Å–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç –∏–∑ –≤–∞—à–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤.\n\n", reply_markup=reply_markup)

async def shopping(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /shopping."""
    log(update)
    chat_id = update.effective_chat.id
    USER_STATE[chat_id] = 'shopping'

    keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back')]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    if update.message:
        await update.message.reply_text(
            "–í—ã –≤—ã–±—Ä–∞–ª–∏: –°–æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É. –û–ø–∏—à–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å, –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤.",
            reply_markup=reply_markup
        )
    elif update.callback_query:
        await update.callback_query.message.edit_text(
            "–í—ã –≤—ã–±—Ä–∞–ª–∏: –°–æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É. –û–ø–∏—à–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å, –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤.",
            reply_markup=reply_markup
        )

async def view_favorites(update: Update, context: CallbackContext) -> None:
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –∫–æ—Ä–∑–∏–Ω."""
    log(update)
    chat_id = update.effective_chat.id
    favorites = FAVORITES.get(chat_id, {})
    if not favorites:
        await update.message.reply_text("–í–∞—à —Å–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –∫–æ—Ä–∑–∏–Ω –ø—É—Å—Ç.")
    else:
        favorites_list = "\n\n".join(f"–ö–æ—Ä–∑–∏–Ω–∞ '{name}':\n{cart}" for name, cart in favorites.items())
        keyboard = [
            [InlineKeyboardButton("üîÅ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–∫–∞–∑", callback_data='repeat_order')],
            [InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data='delete_cart')],
            [InlineKeyboardButton("‚úèÔ∏è –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data='rename_cart')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(f"–í–∞—à–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –∫–æ—Ä–∑–∏–Ω—ã:\n\n{favorites_list}", reply_markup=reply_markup)

async def handle_text(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
    log(update)
    chat_id = update.effective_chat.id
    text = update.message.text.strip()
    state = USER_STATE.get(chat_id)

    if state == 'shopping':
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã
        processing_message = await update.message.reply_text("–í–∞—à –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
        ingredients_list = get_ingredients_list(text)
        context.user_data["last_cart"] = ingredients_list  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ—Ä–∑–∏–Ω—É

        await processing_message.edit_text(f"–°–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {ingredients_list}")

        # –ó–∞–ø—Ä–æ—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
        keyboard = [
            [InlineKeyboardButton("–î–∞", callback_data='add_to_favorites')],
            [InlineKeyboardButton("–ù–µ—Ç", callback_data='back')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text("–•–æ—Ç–∏—Ç–µ –ª–∏ –≤—ã –¥–æ–±–∞–≤–∏—Ç—å —ç—Ç—É –∫–æ—Ä–∑–∏–Ω—É –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ?", reply_markup=reply_markup)
        USER_STATE[chat_id] = 'ask_favorite'

    elif state == 'naming_cart':
        # –ü—Ä–∏—Å–≤–æ–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –∫–æ—Ä–∑–∏–Ω–µ
        last_cart = context.user_data.get("last_cart")
        if not last_cart:
            await update.message.reply_text("–û—à–∏–±–∫–∞: –∫–æ—Ä–∑–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            USER_STATE.pop(chat_id, None)
            return

        if not text:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã.")
            return

        if chat_id not in FAVORITES:
            FAVORITES[chat_id] = {}

        FAVORITES[chat_id][text] = last_cart
        await update.message.reply_text(f"–ö–æ—Ä–∑–∏–Ω–∞ '{text}' –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!")
        USER_STATE.pop(chat_id, None)

    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏–∑ –º–µ–Ω—é.")

async def button(update: Update, context: CallbackContext) -> None:
    log(update)
    query = update.callback_query
    await query.answer()

    chat_id = query.message.chat.id
    if query.data == 'shopping':
        await shopping(update, context)

    elif query.data == 'add_to_favorites':
        last_cart = context.user_data.get("last_cart", None)
        if not last_cart:
            await query.edit_message_text("–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω–æ–π –∫–æ—Ä–∑–∏–Ω—ã.")
        else:
            await query.edit_message_text("–ö–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∑–≤–∞—Ç—å —Å–≤–æ—é –∫–æ—Ä–∑–∏–Ω—É?")
            USER_STATE[chat_id] = 'naming_cart'

    elif query.data == 'view_favorites':
        await view_favorites(update, context)

    elif query.data == 'repeat_order':
        # –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–∫–∞–∑
        favorites = FAVORITES.get(chat_id, {})
        if not favorites:
            await query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –∫–æ—Ä–∑–∏–Ω –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è.")
        else:
            await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä–∑–∏–Ω—É –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞.")

    elif query.data == 'delete_cart':
        # –£–¥–∞–ª–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É
        favorites = FAVORITES.get(chat_id, {})
        if not favorites:
            await query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –∫–æ—Ä–∑–∏–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        else:
            cart_name = query.message.text.split("\n")[0].split(" ")[1].strip("'")  # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã
            if cart_name in favorites:
                del favorites[cart_name]
                await query.edit_message_text(f"–ö–æ—Ä–∑–∏–Ω–∞ '{cart_name}' —É–¥–∞–ª–µ–Ω–∞.")
            else:
                await query.edit_message_text("–ö–æ—Ä–∑–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

    elif query.data == 'rename_cart':
        # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –∫–æ—Ä–∑–∏–Ω—É
        favorites = FAVORITES.get(chat_id, {})
        if not favorites:
            await query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –∫–æ—Ä–∑–∏–Ω –¥–ª—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è.")
        else:
            cart_name = query.message.text.split("\n")[0].split(" ")[1].strip("'")
            if cart_name in favorites:
                await query.edit_message_text(f"–ö–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –∫–æ—Ä–∑–∏–Ω—É '{cart_name}'?")
                USER_STATE[chat_id] = 'naming_cart'
            else:
                await query.edit_message_text("–ö–æ—Ä–∑–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

    elif query.data == 'back':
        keyboard = [
            [InlineKeyboardButton("üçé –°–æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data='shopping')],
            [InlineKeyboardButton("–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data='view_favorites')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("–ß—Ç–æ —è –º–æ–≥—É –¥–ª—è –≤–∞—Å —Å–¥–µ–ª–∞—Ç—å?", reply_markup=reply_markup)

    else:
        await query.edit_message_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤—ã–±–æ—Ä.")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main() -> None:
    print("–ó–∞–ø—É—Å–∫...")
    application = Application.builder().token(config.TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("shopping", shopping))
    application.add_handler(CommandHandler("view_favorites", view_favorites))

    application.add_handler(CallbackQueryHandler(button))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))

    application.run_polling()

if __name__ == "__main__":
    main()