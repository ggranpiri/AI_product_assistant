import asyncio
from datetime import datetime
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, CallbackContext, MessageHandler, filters
import config
from gpt_request import get_ingredients_list
from parser import get_links_from_list
import logging

logging.getLogger("httpx").setLevel(logging.WARNING)

USER_STATE = {}
FAVORITES = {}
PURCHASE_HISTORY = {}


def get_date() -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å—Ç—Ä–æ–∫–∏."""
    return datetime.now().strftime("%Y-%m-%d %H:%M:%S")


def log(update: Update) -> None:
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    if update.message:
        user = update.message.from_user
        name = f"{user.first_name} {user.last_name or ''}".strip()
        text = update.message.text
        print(f'{get_date()} - {name} (id {user.id}) –Ω–∞–ø–∏—Å–∞–ª: "{text}"')
    elif update.callback_query:
        query = update.callback_query
        user = query.from_user
        action = query.data
        print(f'{get_date()} - {user.first_name} (id {user.id}) –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É: "{action}"')
    else:
        print(f"{get_date()} - system_log: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ")


async def start(update: Update, context: CallbackContext) -> None:
    """–°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é."""
    await send_main_menu(update, context, "–Ø ‚Äî –≤–∞—à —É–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç:\n"
                                          "- üõí –°–æ—Å—Ç–∞–≤–∏—Ç—å —É–¥–æ–±–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫.\n"
                                          "- ü•ó –°–æ–∑–¥–∞—Ç—å –≤–∫—É—Å–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç –∏–∑ –≤–∞—à–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤.\n\n")


async def send_main_menu(update: Update, context: CallbackContext, text: str) -> None:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º."""
    keyboard = [
        [InlineKeyboardButton("üçé –°–æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data='shopping')],
        [InlineKeyboardButton("–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data='view_favorites')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    if update.callback_query:
        await update.callback_query.edit_message_text(text, reply_markup=reply_markup)
    elif update.message:
        await update.message.reply_text(text, reply_markup=reply_markup)


async def handle_text(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
    log(update)
    chat_id = update.effective_chat.id
    text = update.message.text.strip()

    state = USER_STATE.get(chat_id)

    if state == 'shopping':
        processing_message = await update.message.reply_text("–í–∞—à –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
        ingredients_list = get_ingredients_list(text)
        ingredients_list_with_links = get_links_from_list(ingredients_list, config.BD_path)
        context.user_data["last_cart"] = ingredients_list_with_links

        formatted_list = "\n".join(
            [f"{i + 1}. {item['name']} - [üîó –°—Å—ã–ª–∫–∞]({item['link']})" for i, item in
             enumerate(ingredients_list_with_links)]
        )

        await processing_message.edit_text(
            f"–í–∞—à —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≥–æ—Ç–æ–≤:\n\n{formatted_list}",
            parse_mode="Markdown"
        )

        keyboard = [
            [InlineKeyboardButton("–î–∞", callback_data='add_to_favorites')],
            [InlineKeyboardButton("–ù–µ—Ç", callback_data='back')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text("–•–æ—Ç–∏—Ç–µ –ª–∏ –≤—ã –¥–æ–±–∞–≤–∏—Ç—å —ç—Ç—É –∫–æ—Ä–∑–∏–Ω—É –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ?", reply_markup=reply_markup)

        if chat_id not in PURCHASE_HISTORY:
            PURCHASE_HISTORY[chat_id] = []
        PURCHASE_HISTORY[chat_id].append(ingredients_list_with_links)

        USER_STATE[chat_id] = 'ask_favorite'

    elif state == 'naming_cart':
        if not text:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã.")
            return

        if chat_id in FAVORITES and text in FAVORITES[chat_id]:
            USER_STATE[chat_id] = 'naming_conflict'
            keyboard = [
                [InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–µ –∏–º—è", callback_data='choose_another_name')],
                [InlineKeyboardButton("–û—Ç–º–µ–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è", callback_data='cancel_addition')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text(
                f"–ö–æ—Ä–∑–∏–Ω–∞ —Å –∏–º–µ–Ω–µ–º '{text}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω–æ –∏–∑ –¥–µ–π—Å—Ç–≤–∏–π:",
                reply_markup=reply_markup
            )
            return

        last_cart = context.user_data.get("last_cart")
        if not last_cart:
            await update.message.reply_text("–û—à–∏–±–∫–∞: –Ω–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–π –∫–æ—Ä–∑–∏–Ω—ã –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.")
            return

        if chat_id not in FAVORITES:
            FAVORITES[chat_id] = {}

        FAVORITES[chat_id][text] = last_cart
        await update.message.reply_text(f"–ö–æ—Ä–∑–∏–Ω–∞ '{text}' –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!")

        USER_STATE.pop(chat_id, None)
        await send_main_menu(update, context, "–ú–æ–≥—É –ª–∏ —è –≤–∞–º –µ—â—ë —á–µ–º-–Ω–∏–±—É–¥—å –ø–æ–º–æ—á—å?")

    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏–∑ –º–µ–Ω—é.")


async def shopping(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã."""
    log(update)
    chat_id = update.effective_chat.id
    USER_STATE[chat_id] = 'shopping'
    await update.message.reply_text(
        "–í—ã –≤—ã–±—Ä–∞–ª–∏: –°–æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É. –û–ø–∏—à–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤.")


async def button(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫."""
    query = update.callback_query
    chat_id = query.message.chat.id
    await query.answer()

    if query.data == 'shopping':
        USER_STATE[chat_id] = 'shopping'
        await query.edit_message_text("–û–ø–∏—à–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤.")
    elif query.data == 'add_to_favorites':
        USER_STATE[chat_id] = 'naming_cart'
        await query.edit_message_text("–ö–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∑–≤–∞—Ç—å —Å–≤–æ—é –∫–æ—Ä–∑–∏–Ω—É?")
    elif query.data.startswith('view_cart:'):
        cart_name = query.data.split(':', 1)[1]
        favorite_cart = FAVORITES.get(chat_id, {}).get(cart_name, [])
        formatted_cart = "\n".join([f"{i + 1}. {item['name']} - [üîó –°—Å—ã–ª–∫–∞]({item['link']})" for i, item in enumerate(favorite_cart)])

        keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='view_favorites')]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(
            f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ—Ä–∑–∏–Ω—ã '{cart_name}':\n\n{formatted_cart}",
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
    elif query.data == 'choose_another_name':
        USER_STATE[chat_id] = 'naming_cart'
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –¥–ª—è –∫–æ—Ä–∑–∏–Ω—ã.")
    elif query.data == 'cancel_addition':
        USER_STATE.pop(chat_id, None)
        await send_main_menu(update, context, "–ú–æ–≥—É –ª–∏ —è –≤–∞–º –µ—â—ë —á–µ–º-–Ω–∏–±—É–¥—å –ø–æ–º–æ—á—å?")
    elif query.data == 'back':
        await send_main_menu(update, context, "–ú–æ–≥—É –ª–∏ —è –≤–∞–º –µ—â—ë —á–µ–º-–Ω–∏–±—É–¥—å –ø–æ–º–æ—á—å?")
    elif query.data == 'view_favorites':
        await send_favorites_menu(update, context)


async def send_favorites_menu(update: Update, context: CallbackContext) -> None:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–Ω—é —Å –∏–∑–±—Ä–∞–Ω–Ω—ã–º–∏ –∫–æ—Ä–∑–∏–Ω–∞–º–∏."""
    chat_id = update.effective_chat.id
    favorite_carts = FAVORITES.get(chat_id, {})
    if favorite_carts:
        keyboard = [
            [InlineKeyboardButton(cart_name, callback_data=f"view_cart:{cart_name}")] for cart_name in favorite_carts
        ]
        keyboard.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back')])
        reply_markup = InlineKeyboardMarkup(keyboard)
        if update.callback_query:
            await update.callback_query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä–∑–∏–Ω—É –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ:", reply_markup=reply_markup)
        elif update.message:
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä–∑–∏–Ω—É –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ:", reply_markup=reply_markup)
    else:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –∫–æ—Ä–∑–∏–Ω. –î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∫–æ—Ä–∑–∏–Ω—É.")
        await send_main_menu(update, context, "–ú–æ–≥—É –ª–∏ —è –≤–∞–º –µ—â—ë —á–µ–º-–Ω–∏–±—É–¥—å –ø–æ–º–æ—á—å?")


def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
    application = Application.builder().token(config.TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT, handle_text))
    application.add_handler(CallbackQueryHandler(button))

    application.run_polling()


if __name__ == '__main__':
    main()