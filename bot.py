import logging
from datetime import datetime
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ConversationHandler,
    MessageHandler,
    filters,
    ContextTypes,
)

import config
from gpt_request import get_ingredients_list
from parser import get_links_from_list

# –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO,
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è
MENU, SHOPPING, ASK_FAVORITE, NAMING_CART, VIEW_FAVORITES, FAVORITE_DETAILS = range(6)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –∫–æ—Ä–∑–∏–Ω
FAVORITES = {}


def get_date() -> str:
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É."""
    return datetime.now().strftime("%Y-%m-%d %H:%M:%S")


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞, –æ—Ç–ø—Ä–∞–≤–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é."""
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º.")
    await send_main_menu(update, context, "–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–ø–∏—Å–∫–æ–≤ –ø–æ–∫—É–ø–æ–∫.")
    return MENU


async def send_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE, text: str) -> None:
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏."""
    keyboard = [
        [InlineKeyboardButton("üçé –°–æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data=str(SHOPPING))],
        [InlineKeyboardButton("üìå –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data=str(VIEW_FAVORITES))],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    if update.callback_query:
        await update.callback_query.edit_message_text(text, reply_markup=reply_markup)
    else:
        await update.message.reply_text(text, reply_markup=reply_markup)


async def shopping(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã."""
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –Ω–∞—á–∞–ª —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫–æ—Ä–∑–∏–Ω—É.")
    await update.callback_query.edit_message_text("–û–ø–∏—à–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å, –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤.")
    return SHOPPING


async def handle_shopping(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã."""
    chat_id = update.effective_chat.id
    text = update.message.text.strip()
    processing_message = await update.message.reply_text("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å...")

    try:
        ingredients_list = get_ingredients_list(text)
        ingredients_with_links = get_links_from_list(ingredients_list, config.BD_path)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        await processing_message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return MENU

    context.user_data["last_cart"] = ingredients_with_links

    cart_text = "\n".join(
        [f'<a href="{product["link"]}">{product["name"]}</a>' for product in ingredients_with_links]
    )
    await processing_message.edit_text(f"–°–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤:\n{cart_text}", parse_mode="HTML")

    keyboard = [
        [InlineKeyboardButton("–î–∞", callback_data=str(ASK_FAVORITE))],
        [InlineKeyboardButton("–ù–µ—Ç", callback_data=str(MENU))],
    ]
    await update.message.reply_text(
        "–•–æ—Ç–∏—Ç–µ –ª–∏ –≤—ã –¥–æ–±–∞–≤–∏—Ç—å —ç—Ç—É –∫–æ—Ä–∑–∏–Ω—É –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ?", reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return ASK_FAVORITE


async def add_to_favorites(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ."""
    await update.callback_query.edit_message_text("–ö–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∑–≤–∞—Ç—å —Å–≤–æ—é –∫–æ—Ä–∑–∏–Ω—É?")
    return NAMING_CART


async def naming_cart(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º."""
    chat_id = update.effective_chat.id
    cart_name = update.message.text.strip()
    last_cart = context.user_data.get("last_cart")

    if not last_cart:
        await update.message.reply_text("–û—à–∏–±–∫–∞: –Ω–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–π –∫–æ—Ä–∑–∏–Ω—ã –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.")
        return MENU

    FAVORITES.setdefault(chat_id, {})[cart_name] = last_cart
    await update.message.reply_text(f"–ö–æ—Ä–∑–∏–Ω–∞ '{cart_name}' –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!")
    await send_main_menu(update, context, "–ß–µ–º –µ—â—ë –º–æ–≥—É –ø–æ–º–æ—á—å?")
    return MENU


async def view_favorites(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –∫–æ—Ä–∑–∏–Ω."""
    chat_id = update.effective_chat.id
    favorites = FAVORITES.get(chat_id, {})
    if not favorites:
        await update.callback_query.edit_message_text("–í–∞—à —Å–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—É—Å—Ç.")
        return MENU

    keyboard = [[InlineKeyboardButton(name, callback_data=name)] for name in favorites.keys()]
    keyboard.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=str(MENU))])

    await update.callback_query.edit_message_text(
        "–í–∞—à–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –∫–æ—Ä–∑–∏–Ω—ã:", reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return FAVORITE_DETAILS


async def favorite_details(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∏–∑–±—Ä–∞–Ω–Ω–æ–π –∫–æ—Ä–∑–∏–Ω—ã."""
    chat_id = update.effective_chat.id
    cart_name = update.callback_query.data
    cart = FAVORITES.get(chat_id, {}).get(cart_name)

    if not cart:
        await update.callback_query.edit_message_text("–û—à–∏–±–∫–∞: –∫–æ—Ä–∑–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return MENU

    cart_text = "\n".join(
        [f'<a href="{product["link"]}">{product["name"]}</a>' for product in cart]
    )
    keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=str(VIEW_FAVORITES))]]
    await update.callback_query.edit_message_text(
        f"–ö–æ—Ä–∑–∏–Ω–∞ *{cart_name}*:\n{cart_text}", reply_markup=InlineKeyboardMarkup(keyboard), parse_mode="HTML"
    )
    return VIEW_FAVORITES


async def back_to_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    await send_main_menu(update, context, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    return MENU


def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
    application = Application.builder().token(config.TOKEN).build()

    conversation_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            MENU: [
                CallbackQueryHandler(shopping, pattern=f"^{SHOPPING}$"),
                CallbackQueryHandler(view_favorites, pattern=f"^{VIEW_FAVORITES}$"),
            ],
            SHOPPING: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_shopping)],
            ASK_FAVORITE: [
                CallbackQueryHandler(add_to_favorites, pattern=f"^{ASK_FAVORITE}$"),
                CallbackQueryHandler(back_to_menu, pattern=f"^{MENU}$"),
            ],
            NAMING_CART: [MessageHandler(filters.TEXT & ~filters.COMMAND, naming_cart)],
            VIEW_FAVORITES: [
                CallbackQueryHandler(favorite_details),
                CallbackQueryHandler(back_to_menu, pattern=f"^{MENU}$"),
            ],
        },
        fallbacks=[CommandHandler("start", start)],
    )

    application.add_handler(conversation_handler)
    application.run_polling()


if __name__ == "__main__":
    main()